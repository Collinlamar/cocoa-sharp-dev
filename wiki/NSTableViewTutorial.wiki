#summary Simple tutorial on the use of a DataSource with an TableView

=Assumptions=
I will be assuming that you have read through the SimpleTutorial and know the basics of creating a Cocoa GUI and how to use Outlets and Actions.

=Project Files=
[http://cocoasharp.sample4.net/NSTableViewTutorial.zip Download Zip Archive (18k)]

Download provided courtesy of renaud.

=Starting Off=

==Building the NIB==
Create a simple GUI consisting of a NSTableView and a NSButton.  You can arrange them anyway that you want.  Follow the steps in SimpleTutorial on creating actions/outlets for the various elements.

We are going to add a couple of more steps to the NIB building process.

        1.  Subclass and Instantiate a NSObject, names this DataSource.
        1.  You will need to activate the Instances tab, and then change the view from Icons to List.  To do this look at the far right edge of the window, directly above the scroll bars.  One of the buttons will be blue, click the other button and you should now see a tree view of the items in the NIB.  It's easier to connect the DataSource to the NSTableView this way because the NSTableView is actually made up of NSView and NSScrollView.  Ctrl Click and Drag from the NSTableView item to the DataSource.  Connect the DataSource as both the delage and the datasource.

http://cocoa-sharp-dev.googlecode.com/svn/wiki/NSTableViewTutorial_0.png

==NSTableView Tips==
In this tutorial I'm using just a single column NSTableView.  To adjust the number of columns you can use the Attributes panel of the Info Window, or you can double click on the NSTableView and you are now in column editing mode.  This is where you set a unique identifier for each column in the table, the column text, and some various other properties of the column.

||If you plan on using a multi column table it is imperative that you set a column identifier and that it is unique to the table in question.||

I'll explain why the above tip is so important once we hit the code.

Anytime you add new data to the NSTableView you will need to call it's reloadData method.  This will force the table to reconstruct the data.

||Call NSTableView.reloadData() method when new data is added or data is updated!!||

=The Code=
==Main.cs==
Create the Main.cs file as normal, this file will normally never change unless you want something specific done.

==ApplicationController.cs==
The applicationcontroller.cs is the main interface handling point. This is where all the GUI elements are connected and defined.

{{{
using System;
using System.IO;
using System.Collections;
using Apple.Foundation;
using Apple.AppKit;

[Register("ApplicationController")]
public class ApplicationController : NSObject {
        
	[Connect]
	public NSTableView mainTable;
        
	[Connect]
	public NSWindow mainWindow;

	private int itemCount = 1;

	protected ApplicationController(System.IntPtr a, bool b) : base(a, b){}
        
	//Form.Load Event
	[Export("applicationWillFinishLaunching:")]
	public void FinishLoading(NSNotification aNotification) {
		
		mainTable.target = this;
		((DataSource)mainTable.dataSource).Add( "Test Item 1" );
		mainTable.reloadData();
            
	}

	[Export("buttonClick:")]
	public void buttonClick(object sender) {
			
		itemCount += 1;
		((DataSource)mainTable.dataSource).Add( "Test Item " + itemCount.ToString() );
		mainTable.reloadData();
				
	}
        	
}
}}}

The interesting stuff in this example is the FinishLoading event and the buttonClick event.  If you look close you can see that I am getting the DataSource from the NSTableView dataSource property.  This property is read-only.  In my DataSource implementation I defined an Add method so I can add items in this manner.  You can choose to add them in anyway you see fit, as long as the DataSource object can get the information.

==DataSource.cs==

DataSource is the class that must implement at least two methods, as described in the Apple Documentation.

*public int numberOfRowsInTableView( NSTableView aTableView )*

This method is responsible for returning the total count of items within the NSTableView.

*public object objectValueForTableColumn( NSTableView aTableView, NSTableColumn aTableColumn, int rowIndex )*

This method is how the NSTableView knows what to display and where to display it at.  As you can see from the argument list it will tell you the NSTableView in question, which NSTableColumn it wants the data from, and finally which row.  This method is asking you to provide the data that is in the cell it's wanting.  This code should be very efficient as it is how the table is populated.

||If you decided to use a multi-column table then you can decide what to return based on the columns identifier by using aTableColumn.identifier to see what column the table is wanting.||

{{{
using System;
using System.Collections;
using Apple.Foundation;
using Apple.AppKit;


[Register("DataSource")]
public class DataSource : NSObject {

	ItemCollection items = new ItemCollection();

	protected DataSource(System.IntPtr a, bool b) : base(a, b) { }

	static DataSource() { }

	[Export("numberOfRowsInTableView:")]
	public int numberOfRowsInTableView( NSTableView aTableView )
	{
		return items.Count;
	}

	[Export("tableView:objectValueForTableColumn:row:")]
	public object objectValueForTableColumn( NSTableView aTableView, NSTableColumn aTableColumn, int rowIndex )
	{

		return items[ rowIndex ];

	}

	public void Add( string item )
	{
		items.Add( item );
	}
	
}

public class ItemCollection : CollectionBase
{

	public void Add( string item )
	{
		base.List.Add( item );
	}
	
	public void Remove( int index )
	{
		base.List.Remove( index );
	}
	
	public string this[ int index ]
	{
		get{
			return (string)base.List[ index ];
		}
	}

}
}}}

I created an ItemCollection in the DataSource.cs file just for ease of use.  Whenever the NSTableView method reloadData is called the table will excute the objectValueForTableColumn method to retrieve the data.  So like I said before, if you have lots of data this needs to be fast!!.

You can use any storage method that you want, I just used a Collection because it was quick and easy.  You can use anything at all.

=Helper Files=
Create these as normal

=Finished=
I hope this helps somebody.  It took me weeks to figure out how to get this to work.  I finally found an old example on the mailing list archives that used an NSOutlineView and was finally able to figure out what a NSTableView was actually wanting from me.

As always, any questions, concerns, complaints email them to binary.god@gmail.com.



